{"ast":null,"code":"export const reducer = (candidates, action) => {\n  switch (action.type) {\n    case 'addCandidate':\n    //return [...candidates, action.payload]\n    case 'updateCandidate':\n      const updateCandidate = action.payload;\n      return [...candidates, ...updateCandidate];\n    case 'updateStatus':\n      return candidates.map(candidate => {\n        return candidate.id === action.payload.draggableId ? {\n          ...candidate,\n          status: action.payload.destination\n        } : candidate;\n      });\n    case 'removeCandidate':\n      return candidates.filter(candidate => candidate.id !== action.payload);\n    case 'rearangeArr':\n      const rearangedArr = [...candidates];\n      const [removed] = rearangedArr.splice(action.payload.sourceIndex, 1);\n      rearangedArr.splice(action.payload.destinationIndex, 0, removed);\n      return rearangedArr;\n    default:\n      return candidates;\n  }\n};","map":{"version":3,"names":["reducer","candidates","action","type","updateCandidate","payload","map","candidate","id","draggableId","status","destination","filter","rearangedArr","removed","splice","sourceIndex","destinationIndex"],"sources":["/Users/tequam/Projects/case-frontend-tequamnesh/src/hooks/reducer.ts"],"sourcesContent":["import { Candidate } from \"../types/CandidateType\";\n\ntype SearchAction =\n{\n  type: 'removeCandidate',\n  payload: string\n}\ntype AddAction =\n{\n  type: 'addCandidate' | 'updateCandidate',\n  payload: Candidate[]\n}\ntype RearangeArr =\n{\n  type: 'rearangeArr',\n  payload: { sourceIndex: number, destinationIndex: number}\n}\ntype UpdateStatus =\n{\n  type: 'updateStatus',\n  payload: { draggableId: string, destination: string }\n}\n\nexport type Action = SearchAction | AddAction | RearangeArr | UpdateStatus\n\nexport const reducer = (candidates: Candidate[], action: Action): Candidate[]=> {\n  switch(action.type){\n    case 'addCandidate':\n      //return [...candidates, action.payload]\n    case 'updateCandidate':\n      const updateCandidate = action.payload\n      return [...candidates, ...updateCandidate]\n    case 'updateStatus':\n      return candidates.map((candidate) => {\n        return candidate.id === action.payload.draggableId\n          ? {\n              ...candidate,\n              status: action.payload.destination,\n            }\n          : candidate\n          })\n    case 'removeCandidate':\n      return candidates.filter(candidate => candidate.id !== action.payload)\n    case 'rearangeArr':\n      const rearangedArr = [...candidates];\n      const [removed] = rearangedArr.splice(action.payload.sourceIndex, 1);\n      rearangedArr.splice(action.payload.destinationIndex, 0, removed);\n      return rearangedArr\n    default:\n      return candidates\n  }\n}\n"],"mappings":"AAyBA,OAAO,MAAMA,OAAO,GAAGA,CAACC,UAAuB,EAAEC,MAAc,KAAiB;EAC9E,QAAOA,MAAM,CAACC,IAAI;IAChB,KAAK,cAAc;IACjB;IACF,KAAK,iBAAiB;MACpB,MAAMC,eAAe,GAAGF,MAAM,CAACG,OAAO;MACtC,OAAO,CAAC,GAAGJ,UAAU,EAAE,GAAGG,eAAe,CAAC;IAC5C,KAAK,cAAc;MACjB,OAAOH,UAAU,CAACK,GAAG,CAAEC,SAAS,IAAK;QACnC,OAAOA,SAAS,CAACC,EAAE,KAAKN,MAAM,CAACG,OAAO,CAACI,WAAW,GAC9C;UACE,GAAGF,SAAS;UACZG,MAAM,EAAER,MAAM,CAACG,OAAO,CAACM;QACzB,CAAC,GACDJ,SAAS;MACX,CAAC,CAAC;IACR,KAAK,iBAAiB;MACpB,OAAON,UAAU,CAACW,MAAM,CAACL,SAAS,IAAIA,SAAS,CAACC,EAAE,KAAKN,MAAM,CAACG,OAAO,CAAC;IACxE,KAAK,aAAa;MAChB,MAAMQ,YAAY,GAAG,CAAC,GAAGZ,UAAU,CAAC;MACpC,MAAM,CAACa,OAAO,CAAC,GAAGD,YAAY,CAACE,MAAM,CAACb,MAAM,CAACG,OAAO,CAACW,WAAW,EAAE,CAAC,CAAC;MACpEH,YAAY,CAACE,MAAM,CAACb,MAAM,CAACG,OAAO,CAACY,gBAAgB,EAAE,CAAC,EAAEH,OAAO,CAAC;MAChE,OAAOD,YAAY;IACrB;MACE,OAAOZ,UAAU;EACrB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}