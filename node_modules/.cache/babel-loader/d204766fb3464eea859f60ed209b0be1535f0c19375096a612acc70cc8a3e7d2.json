{"ast":null,"code":"var _jsxFileName = \"/Users/tequam/Projects/case-frontend-tequamnesh/src/components/CandidateList.tsx\";\nimport React from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport CandidateCard from './CandidateCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CANDIDATE_STATE = [{\n  id: 'contact_id',\n  state: 'CONTACT'\n}, {\n  id: 'dialog_id',\n  state: 'DIALOGUE'\n}, {\n  id: 'interview_id',\n  state: 'INTERVIEW'\n}, {\n  id: 'closed_id',\n  state: 'CLOSED'\n}];\nconst CandidateList = ({\n  candidates,\n  removeCandidate,\n  handleDragDrop\n}) => {\n  // const [newcandidates, setNewcandidates] = useState(candidates)\n\n  // const handleDragDrop = (result: any) => {\n  //   const { destination, source } = result\n  //   console.log(result)\n  //   const sourceIndex = source.index\n  //   //const destinationIndex = destination.index\n\n  //   if(!destination || destination.droppableId === source.droppableId) return\n\n  //   if(destination.droppableId !== source.droppableId){\n  //     const updateState = newcandidates[sourceIndex].status = destination.droppableId\n  //     setNewcandidates([...newcandidates, updateState])\n  //   }\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Candidate List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between'\n      },\n      children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: handleDragDrop,\n        children: CANDIDATE_STATE.map(category => /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: category.state,\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            ...provided.droppableProps,\n            ref: provided.innerRef,\n            children: [category.state, /*#__PURE__*/_jsxDEV(\"div\", {\n              children: candidates.filter(candidate => candidate.status.toUpperCase() === category.state).map((candidate, index) => /*#__PURE__*/_jsxDEV(CandidateCard, {\n                candidate: candidate,\n                index: index\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 27\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 21\n            }, this), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 19\n          }, this)\n        }, category.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c = CandidateList;\nexport default CandidateList;\nvar _c;\n$RefreshReg$(_c, \"CandidateList\");","map":{"version":3,"names":["React","DragDropContext","Droppable","CandidateCard","jsxDEV","_jsxDEV","Fragment","_Fragment","CANDIDATE_STATE","id","state","CandidateList","candidates","removeCandidate","handleDragDrop","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","flexDirection","justifyContent","onDragEnd","map","category","droppableId","provided","droppableProps","ref","innerRef","filter","candidate","status","toUpperCase","index","placeholder","_c","$RefreshReg$"],"sources":["/Users/tequam/Projects/case-frontend-tequamnesh/src/components/CandidateList.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Candidate } from '../types/CandidateType';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport CandidateCard from './CandidateCard';\n\nconst CANDIDATE_STATE = [\n  { id: 'contact_id', state: 'CONTACT'},\n  { id: 'dialog_id', state: 'DIALOGUE'},\n  { id: 'interview_id', state: 'INTERVIEW'},\n  { id: 'closed_id', state: 'CLOSED'},\n]\n\ninterface CandidateListProps {\n  candidates: Candidate[];\n  removeCandidate: (id: string) => void;\n  handleDragDrop: () => void;\n}\n\nconst CandidateList: React.FC<CandidateListProps> = ({ candidates, removeCandidate, handleDragDrop }) => {\n\n  // const [newcandidates, setNewcandidates] = useState(candidates)\n\n  // const handleDragDrop = (result: any) => {\n  //   const { destination, source } = result\n  //   console.log(result)\n  //   const sourceIndex = source.index\n  //   //const destinationIndex = destination.index\n\n  //   if(!destination || destination.droppableId === source.droppableId) return\n\n  //   if(destination.droppableId !== source.droppableId){\n  //     const updateState = newcandidates[sourceIndex].status = destination.droppableId\n  //     setNewcandidates([...newcandidates, updateState])\n  //   }\n  // }\n\n  return (\n    <>\n      <h1>Candidate List</h1>\n      <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between'} }>\n        <DragDropContext onDragEnd={handleDragDrop}>\n            {CANDIDATE_STATE.map((category) => (\n              <Droppable droppableId={category.state} key={category.id}>\n                {(provided) => (\n                  <div {...provided.droppableProps} ref={provided.innerRef}>{category.state}\n                    <div>\n                      {candidates\n                        .filter((candidate) => candidate.status.toUpperCase() === category.state)\n                        .map((candidate, index) => (\n                          <CandidateCard candidate={candidate} index={index} key={index}/>\n                      ))}\n                    </div>\n                    {provided.placeholder}\n                </div>\n                )}\n              </Droppable>\n            ))}\n        </DragDropContext>\n      </div>\n    </>\n  )\n}\n\nexport default CandidateList\n"],"mappings":";AAAA,OAAOA,KAAK,MAAoB,OAAO;AAEvC,SAASC,eAAe,EAAEC,SAAS,QAAQ,qBAAqB;AAChE,OAAOC,aAAa,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE5C,MAAMC,eAAe,GAAG,CACtB;EAAEC,EAAE,EAAE,YAAY;EAAEC,KAAK,EAAE;AAAS,CAAC,EACrC;EAAED,EAAE,EAAE,WAAW;EAAEC,KAAK,EAAE;AAAU,CAAC,EACrC;EAAED,EAAE,EAAE,cAAc;EAAEC,KAAK,EAAE;AAAW,CAAC,EACzC;EAAED,EAAE,EAAE,WAAW;EAAEC,KAAK,EAAE;AAAQ,CAAC,CACpC;AAQD,MAAMC,aAA2C,GAAGA,CAAC;EAAEC,UAAU;EAAEC,eAAe;EAAEC;AAAe,CAAC,KAAK;EAEvG;;EAEA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEA,oBACET,OAAA,CAAAE,SAAA;IAAAQ,QAAA,gBACEV,OAAA;MAAAU,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBd,OAAA;MAAKe,KAAK,EAAE;QAAEC,OAAO,EAAE,MAAM;QAAEC,aAAa,EAAE,KAAK;QAAEC,cAAc,EAAE;MAAe,CAAG;MAAAR,QAAA,eACrFV,OAAA,CAACJ,eAAe;QAACuB,SAAS,EAAEV,cAAe;QAAAC,QAAA,EACtCP,eAAe,CAACiB,GAAG,CAAEC,QAAQ,iBAC5BrB,OAAA,CAACH,SAAS;UAACyB,WAAW,EAAED,QAAQ,CAAChB,KAAM;UAAAK,QAAA,EACnCa,QAAQ,iBACRvB,OAAA;YAAA,GAASuB,QAAQ,CAACC,cAAc;YAAEC,GAAG,EAAEF,QAAQ,CAACG,QAAS;YAAAhB,QAAA,GAAEW,QAAQ,CAAChB,KAAK,eACvEL,OAAA;cAAAU,QAAA,EACGH,UAAU,CACRoB,MAAM,CAAEC,SAAS,IAAKA,SAAS,CAACC,MAAM,CAACC,WAAW,CAAC,CAAC,KAAKT,QAAQ,CAAChB,KAAK,CAAC,CACxEe,GAAG,CAAC,CAACQ,SAAS,EAAEG,KAAK,kBACpB/B,OAAA,CAACF,aAAa;gBAAC8B,SAAS,EAAEA,SAAU;gBAACG,KAAK,EAAEA;cAAM,GAAMA,KAAK;gBAAApB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAClE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC,EACLS,QAAQ,CAACS,WAAW;UAAA;YAAArB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpB;QACJ,GAZ0CO,QAAQ,CAACjB,EAAE;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAa7C,CACZ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACW;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACf,CAAC;EAAA,eACN,CAAC;AAEP,CAAC;AAAAmB,EAAA,GA3CK3B,aAA2C;AA6CjD,eAAeA,aAAa;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}